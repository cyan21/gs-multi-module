pipelines:
  - name: backapp_mvn
    configuration:
      environmentVariables:
        readOnly:
          envVarMvnPromoteRepo: ninja-rc-mvn-local
          envVarEdgeUrl: http://edge-us-yannc3-0.soleng-emea-staging.jfrog.team:80
    steps:
      - name: build_backapp_mvn
        type: MvnBuild
        configuration: 
          mvnCommand:  clean package
          sourceLocation:       complete/  #required
          configFileLocation:   CI  #required
          configFileName:       mvn-art-config  #required
          forceXrayScan:        false #optional
          autoPublishBuildInfo: true #optional
          inputResources:
            - name: src_code_backapp_mvn
          outputResources:
            - name: bi_backapp_mvn
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/build_${pipeline_name}?branch=${res_src_code_backapp_mvn_branchName}"
            - cd ${res_src_code_backapp_mvn_resourcePath}/complete/CI/jfrog
            - ls -l && chmod +x init_mvn.sh
            - ./init_mvn.sh -u  ${int_artifactory_eu_url/%artifactory/} -p ${int_artifactory_eu_apikey} -e "${envVarEdgeUrl}"
          onSuccess:
#            - add_run_variables myAppVersion=`if [[ ${res_src_code_backapp_mvn_isGitTag} == "True" ]]; then echo ${res_src_code_backapp_mvn_gitTagName}; else echo ${myDemoVersion}; fi` 
            - add_run_variables runVarAppVersion=`sed -n "s/[[:space:]]*<version>\(.*\)<\/version>/\1/p" ${res_src_code_backapp_mvn_resourcePath}/complete/pom.xml `
            - add_run_variables runVarGitCommit=${res_src_code_backapp_mvn_commitSha}
            - echo $runVarAppVersion
            - echo $runVarGitCommit
            - jfrog rt sp --build=${res_bi_backapp_mvn_buildName}/${run_number} --exclusions="*.pom;*library*" ${envVarMvnPromoteRepo}/ "src.commit.sha=${runVarGitCommit};app.version=${runVarAppVersion};app.name=ninja"
                
      - name: scan_backapp_mvn
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_backapp_mvn
              trigger: true
            
      - name: promote_bi_backapp_mvn
        type: PromoteBuild
        configuration:
          targetRepository: ${envVarMvnPromoteRepo}
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: false
          inputResources:
            - name: bi_backapp_mvn
              trigger: true
          inputSteps:
            - name: scan_backapp_mvn
          outputResources:
            - name: pb_backapp_mvn            
            - name: bi_backapp_mvn_promoted_staging
        execution:  
          onStart:
            - echo ${res_bi_backapp_mvn_buildName} 
            - echo ${res_bi_backapp_mvn_buildNumber} 
          onSuccess:
            - write_output pb_backapp_mvn appVersion=${runVarAppVersion}
            - write_output pb_backapp_mvn appCommitSHA=${runVarGitCommit}
            - write_output pb_backapp_mvn biNumber=${res_bi_backapp_mvn_buildNumber}

  - name: backapp_mvn_docker
    configuration:
      environmentVariables:
        readOnly:
          envVarDockerRepoUrl: ninja-dev-docker.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
          envVarDockerPushRepo: ninja-dev-docker
#          envVarDockerImageName: yannaws-ninja-dev-docker.jfrog.io/backapp-mvn
          envVarDockerImageName: ${envVarDockerRepoUrl}/backapp-mvn
          envVarDockerPromoteRepo: ninja-rc-docker-local
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: together
          runtime:
            type: host
          inputResources:
            - name: pb_backapp_mvn
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${envVarDockerRepoUrl}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - add_run_variables runVarAppVersion=${res_pb_backapp_mvn_appVersion}
            - add_run_variables runVarAppCommitSHA=${res_pb_backapp_mvn_appCommitSHA}
      - name: build_backapp_mvn_docker
        type: DockerBuild
        configuration:
          affinityGroup: together
          dockerFileName: Dockerfile
          dockerFileLocation: complete/CI/Docker/
          dockerImageName: ${envVarDockerImageName}
          dockerImageTag: '${runVarAppVersion}'
          dockerOptions: --build-arg JFROG_CLI_BUILD_URL=${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/build_${pipeline_name}?branch=jfrog-ode
          inputSteps:
            - name: setup_env
          inputResources:
            - name: src_dockerfile_backapp_mvn
            - name: fs_backapp_mvn
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - ls -la ${res_fs_backapp_mvn_resourcePath}
            - echo ${res_src_dockerfile_backapp_mvn_resourcePath}
            - ls -la  ${res_src_dockerfile_backapp_mvn_resourcePath}
            - cp ${res_fs_backapp_mvn_resourcePath}/multi-module-application-${runVarAppVersion}.jar ${res_src_dockerfile_backapp_mvn_resourcePath}/complete/CI/Docker/multi-module-application.jar
            - ls -la ${res_src_dockerfile_backapp_mvn_resourcePath}/complete/CI/Docker/
            - add_run_variables runVarGitCommit=${res_src_dockerfile_backapp_mvn_commitSha}
      - name: publish_backapp_mvn_docker
        type: DockerPush
        configuration:
          affinityGroup: together
          targetRepository: ${envVarDockerPushRepo}
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_backapp_mvn_docker
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_backapp_mvn_docker
        execution:
          onSuccess:
            - echo "${envVarDockerPushRepo}/backapp-mvn/${runVarAppVersion}/manifest.json"
            - jfrog rt sp --build=${res_bi_backapp_mvn_docker_buildName}/${run_number} ${envVarDockerPushRepo}/backapp-mvn/${runVarAppVersion}/manifest.json "app.version=${runVarAppVersion};app.commit.sha=${runVarAppCommitSHA};dockerfile.commit.sha=${runVarGitCommit}"

      - name: scan_bi_backapp_mvn_docker
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_backapp_mvn_docker
              trigger: true

      - name: promote_bi_backapp_mvn_docker
        type: PromoteBuild
        configuration:
          targetRepository: ${envVarDockerPromoteRepo}
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: bi_backapp_mvn_docker
              trigger: true
          inputSteps:
            - name: scan_bi_backapp_mvn_docker
          outputResources:
            - name: bi_backapp_mvn_docker_promoted_staging
            - name: pb_backapp_mvn_docker
        execution:
          onSuccess:
            - write_output pb_backapp_mvn_docker newTag=${runVarAppVersion}

  - name: distrib_mvn
    steps:
      - name: package_app
        type: packaging/PackageDebian
        configuration:
          binaryLocation: "**/multi-module-application*.jar"
          buildName: backapp_mvn
          buildNumber: ${res_pb_backapp_mvn_biNumber}
          appExtension: "jar"
          debianPkgName: "ninja"
          debianBuildName: "webapp-debian"
          targetDebianRepo: "ninja-release-debian"
          propsToSet: "app.version=${res_pb_backapp_mvn_appVersion};app.name=ninja"
          integrations:
            - name: artifactory_eu
          inputResources: 
            - name: pb_backapp_mvn
          outputResources:
            - name: aql_distrib_debian
        execution:
          onStart: 
#            - add_run_variables runVarAppVersion=${res_pb_backapp_mvn_docker_newTag}
            - add_run_variables runVarAppVersion=${res_pb_backapp_mvn_appVersion}
            - echo ${runVarAppVersion}

      - name: init_rb_debian_mvn
        type: CreateReleaseBundle 
        configuration:
          releaseBundleName: java-webapp 
          releaseBundleVersion: ${runVarAppVersion} 
          dryRun: false
          sign: true 
          description: automatic creation 
          releaseNotes:
            syntax: markdown
            content: |
              # Description 
              super release 
              * Feature 1 
              * Bigfix 1
          inputResources:
            - name: aql_distrib_debian
          outputResources:
            - name: rb_mvn_debian 

      - name: distribute_mvn_debian
        type: DistributeReleaseBundle
        configuration:
          dryRun: false 
          inputResources:
            - name: rb_mvn_debian 
              trigger: true   
            - name: dr_mvn_debian 
              trigger: true  
