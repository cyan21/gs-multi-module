pipelines:
  - name: backapp_mvn
    configuration:
      environmentVariables:
        readOnly:
          myDemoVersion:  2.0.3
          mvnPromoteRepo: ninja-rc-mvn-local
    steps:
      - name: build_backapp_mvn
        type: MvnBuild
        configuration: 
          # runtime:
          #   type: image
          #   image:
          #     custom:
          #       name: drydock/u18java
          #       tag: master
          mvnCommand:  clean package
          sourceLocation:       complete/  #required
          configFileLocation:   CI  #required
          configFileName:       mvn-art-config  #required
          forceXrayScan:        false #optional
          autoPublishBuildInfo: true #optional
          inputResources:
            - name: src_code_backapp_mvn
          outputResources:
            - name: bi_backapp_mvn
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/build_${pipeline_name}?branch=${res_src_code_backapp_mvn_branchName}"
          onSuccess:
            - add_run_variables myAppVersion=`if [[ ${res_src_code_backapp_mvn_isGitTag} == "True" ]]; then echo ${res_src_code_backapp_mvn_gitTagName}; else echo ${myDemoVersion}; fi` 
            - add_run_variables myDockerTag="${myAppVersion}-${res_src_code_backapp_mvn_commitSha}"
            - echo $myAppVersion
            - echo $myDockerTag
                
      - name: scan_backapp_mvn
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_backapp_mvn
              trigger: true
            
      - name: promote_bi_backapp_mvn
        type: PromoteBuild
        configuration:
          targetRepository: ${mvnPromoteRepo}
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: false
          inputResources:
            - name: bi_backapp_mvn
              trigger: true
          inputSteps:
            - name: scan_backapp_mvn
          outputResources:
            - name: pb_backapp_mvn            
            - name: bi_backapp_mvn_promoted_staging
        execution:  
          onStart:
            - echo ${res_bi_backapp_mvn_buildName} 
            - echo ${res_bi_backapp_mvn_buildNumber} 
          onSuccess:
            - write_output pb_backapp_mvn dockerAppTag=${myDockerTag}
            - write_output pb_backapp_mvn biNumber=${res_bi_backapp_mvn_buildNumber}
            - write_output pb_backapp_mvn appVersion=${myAppVersion}
            - which jfrog 
            - jfrog --version
            - curl -fL https://getcli.jfrog.io | sh
            - chmod u+x jfrog 
            - sudo mv jfrog $(which jfrog)
            - jfrog --version
            - jfrog rt sp --build=${res_bi_backapp_mvn_buildName}/${res_bi_backapp_mvn_buildNumber} --exclusions="*.pom;*library*" ${mvnPromoteRepo}/ "app.version=${myAppVersion};app.name=ninja"

  - name: backapp_mvn_docker
    configuration:
      environmentVariables:
        readOnly:
          dockerPushRepo: ninja-dev-docker
          dockerRepoUrl: ninja-dev-docker.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
#          myDockerImageName: yannaws-ninja-dev-docker.jfrog.io/backapp-mvn
          myDockerImageName: ${dockerRepoUrl}/backapp-mvn
          dockerPromoteRepo: ninja-rc-docker-local
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: swampup
          runtime:
            type: host
          inputResources:
            - name: pb_backapp_mvn
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${dockerRepoUrl}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - add_run_variables myTag=${res_pb_backapp_mvn_dockerAppTag}
            - add_run_variables biNumber=${res_pb_backapp_mvn_biNumber}
      - name: build_backapp_mvn_docker
        type: DockerBuild
        configuration:
          affinityGroup: swampup
          dockerFileName: Dockerfile
          dockerFileLocation: complete/CI/Docker/
          dockerImageName: ${myDockerImageName}
          dockerImageTag: '${myTag}'
          dockerOptions: --build-arg JFROG_CLI_BUILD_URL=${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/build_${pipeline_name}?branch=jfrog-ode
          inputSteps:
            - name: setup_env
          inputResources:
            - name: src_dockerfile_backapp_mvn
          #   - name: pb_backapp_mvn
            - name: fs_backapp_mvn
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - echo ${res_pb_backapp_mvn_biNumber}

      - name: publish_backapp_mvn_docker
        type: DockerPush
        configuration:
          affinityGroup: swampup
          targetRepository: ${dockerPushRepo}
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_backapp_mvn_docker
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_backapp_mvn_docker

      - name: scan_bi_backapp_mvn_docker
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_backapp_mvn_docker
              trigger: true

      - name: promote_bi_backapp_mvn_docker
        type: PromoteBuild
        configuration:
          targetRepository: ${dockerPromoteRepo}
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: bi_backapp_mvn_docker
              trigger: true
          inputSteps:
            - name: scan_bi_backapp_mvn_docker
          outputResources:
            - name: bi_backapp_mvn_docker_promoted_staging
        execution:
          onSuccess:
            - jfrog rt sp --build=${res_build_info_docker_backapp_buildName}/${res_build_info_docker_backapp_buildNumber} app-docker-rc-local/**/manifest.json "docker.tag=${myDockerTag}"
            - write_output build_info_docker_backapp_promoted_staging "backregistry=\"${ArtIP}/app-docker-virtual\""
            - write_output build_info_docker_backapp_promoted_staging "backimage=\"backapp\""
            - write_output build_info_docker_backapp_promoted_staging "backtag=${myDockerTag}"

  - name: distrib_mvn
    steps:
      - name: package_app
        type: PackageDebian
        configuration:
          binaryLocation: "**/multi-module-application*.jar"
          buildName: backapp_mvn
          buildNumber: ${res_pb_backapp_mvn_biNumber}
          appExtension: "jar"
          debianPkgName: "ninja"
          debianBuildName: "webapp-debian"
          targetDebianRepo: "ninja-release-debian"
          propsToSet: "app.version=${appVersion};app.name=ninja"
          integrations:
            - name: artifactory_eu
          inputResources: 
            - name: pb_backapp_mvn          # all properties can then be spread to the pipeline via add_run_variable (see Execution)
          outputResources:
            - name: aql_distrib_debian
        execution:
          onStart: 
            - add_run_variables appVersion=${res_pb_backapp_mvn_appVersion}
            - echo ${appVersion}
        #   onComplete:
        #     - echo ${res_bi_mvn_debian_buildNumber}
        #     - add_run_variables debianBiNumber=${res_bi_mvn_debian_buildNumber}

      - name: init_rb_debian_mvn
        type: CreateReleaseBundle 
        configuration:
          releaseBundleName: java-webapp 
          releaseBundleVersion: ${appVersion} 
          dryRun: false
          sign: true 
          description: automatic creation 
          releaseNotes:
            syntax: markdown
            content: |
              # Description 
              super release 
              * Feature 1 
              * Bigfix 1
          inputResources:
            - name: aql_distrib_debian
          outputResources:
            - name: rb_mvn_debian 

      - name: distribute_mvn_debian
        type: DistributeReleaseBundle
        configuration:
          dryRun: false 
          inputResources:
            - name: rb_mvn_debian 
              trigger: true   
            - name: dr_mvn_debian 
              trigger: true  