pipelines:
  - name: app_mvn_pipeline
    steps:
      - name: build_app_mvn_backend
        type: MvnBuild
        configuration: 
          # runtime:
          #   type: image
          #   image:
          #     custom:
          #       name: drydock/u18java
          #       tag: master
          mvnCommand:  clean package
          sourceLocation:       complete/  #required
          configFileLocation:   CI  #required
          configFileName:       mvn-art-config  #required
          forceXrayScan:        false #optional
          autoPublishBuildInfo: false #optional
          inputResources:
            - name: src_code_back_app_mvn
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - echo  "Preparing for work..."
          onSuccess:
            - echo ${res_src_code_back_app_mvn_isGitTag}
            - appVersion=`if [[ ${res_src_code_back_app_mvn_isGitTag} == "True" ]]; then echo ${res_src_code_back_app_mvn_gitTagName}; else echo ${res_src_code_back_app_mvn_commitSha}; fi`
            - echo $appVersion
            - add_pipeline_variables appVersion="${appVersion}"
            - add_pipeline_variables subPath="${res_src_code_back_app_mvn_branchName}/${appVersion}"      
          onFailure:
            - echo "You Lose"
          onComplete: #always
            - echo "Leave it as you found it. Let's clean it"

      - name: publish_backend_buildinfo
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: build_app_mvn_backend
          outputResources:
            - name: back_appBuildInfo_mvn
        execution:
          onStart:
            - echo "Preparing for Xray scan..."
          onSuccess:
            - echo build name / build number ${res_back_appBuildInfo_buildName} ${res_back_appBuildInfo_buildNumber}
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
      
      - name: xray_scan_mvn_backapp
        type: Bash
        configuration:
          integrations:
            - name: artifactory_eu
#          affinityGroup: together
          inputResources:
            - name: back_appBuildInfo
          outputResources:
            - name: back_appBuildInfo_scanned_mvn
        execution:
          onStart:
            - echo ${res_back_appBuildInfo_buildName}
            - echo ${res_back_appBuildInfo_buildNumber}
            - jfrog rt bs ${res_back_appBuildInfo_buildName} ${res_back_appBuildInfo_buildNumber} --fail=false
            - write_output back_appBuildInfo_scanned_mvn myversion=${appVersion}


      # - name: promote_build_info_mvn_back_app
      #   type: PromoteBuild
      #   configuration:
      #     targetRepository: ninja-mvn-rc-local
      #     includeDependencies: false
      #     status: SANDBOX_OK
      #     comment: Unit testing and Xray scan passed succesfully
      #     copy: false
      #     inputResources:
      #       - name: back_appBuildInfo
      #         trigger: true
      #     inputSteps:
      #       - name: xray_scan_mvn_backapp
      #     outputResources:
      #       - name: build_info_back_app_promoted_staging
      #   execution:  
      #     onStart:
      #       - echo ${res_back_appBuildInfo_buildName} 
      #       - echo ${res_back_appBuildInfo_buildNumber} 
      #     onSuccess:
      #       - jfrog rt sp --build=${res_back_appBuildInfo_buildName}/${res_back_appBuildInfo_buildNumber} app-mvn-rc-local/ "app.version=${appVersion}"
      #       - write_output build_info_back_app_promoted_staging myversion=${appVersion}

  - name: app_docker_pipeline
    steps:
      - name: build_docker_backapp_mvn
        type: DockerBuild
        configuration:
          affinityGroup: swampup
          dockerFileName: Dockerfile
          dockerFileLocation: complete/CI/Docker/
          dockerImageName: '${ArtIP}/ninja-docker/backapp'
          dockerImageTag: '${res_back_appBuildInfo_scanned_mvn_myversion}-${res_src_dockerfile_back_app_commitSha}'
          inputResources:
            - name: src_dockerfile_back_app
            - name: back_appBuildInfo_scanned_mvn
            - name: back_app_exec
          integrations:
            - name: artifactory_eu
            # - name: docker_registry
        execution:
          onStart:
            - 'export ArtIP=$(echo ${int_artifactory_url}|awk -F ''/'' ''{print $3}'')'
            - echo ${res_back_appBuildInfo_scanned_mvn_myversion}
            - add_pipeline_variables appVersion="${res_back_appBuildInfo_scanned_mvn_myversion}"
            - echo $triggerBuildInfoName
            - echo $triggerBuildInfoNumber
            - add_pipeline_variables triggerBuildInfoName="${res_build_info_back_app_promoted_staging_buildName}"
            - add_pipeline_variables triggerBuildInfoNumber="${res_build_info_back_app_promoted_staging_buildNumber}"
            - echo $triggerBuildInfoName
            - echo $triggerBuildInfoNumber
            - echo ${appVersion}
            - echo $triggerBuildInfoName
            - echo ${triggerBuildInfoNumber}
            #####################################
            - echo ${res_back_app_exec_resourcePath}
            - echo "Gradle App Build number :" 
            - echo ${triggerBuildInfoNumber}
            - echo "Webservice App version :" 
            - echo ${appVersion} 
            - echo "Git repo hash :" 
            - echo ${res_src_dockerfile_back_app_commitSha}
            - echo "Copying exec binary to specific location..." && ls -l
            - echo "Filespec location :" && echo ${res_back_app_exec_resourcePath} && ls -l ${res_back_app_exec_resourcePath}
            - echo $appVersion
            - sed -i "s/registry/${ArtIP}/g" ${res_src_dockerfile_back_app_resourcePath}/complete/CI/Docker/Dockerfile
            - add_pipeline_variables myDockerTag="${appVersion}-${res_src_dockerfile_back_app_commitSha}"
          onSuccess:
            - echo "Job well done!"

      - name: publish_docker_backapp
        type: DockerPush
        configuration:
          affinityGroup: swampup
          targetRepository: ninja-docker
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_docker_backapp_mvn
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: build_info_docker_backapp_mvn
        execution:
          onSuccess:
            - echo "Job well done!"
            - echo $appVersion

      - name: xray_scan_docker_build_info_backapp_mvn
        type: Bash
        configuration:
          integrations:
            - name: artifactory_eu
          affinityGroup: swampup
          inputResources:
            - name: build_info_docker_backapp_mvn
        execution:
          onStart:
            - echo ${res_build_info_docker_backapp_mvn_buildName}
            - echo ${res_build_info_docker_backapp_mvn_buildNumber}
            - jfrog rt bs ${res_build_info_docker_backapp_mvn_buildName} ${res_build_info_docker_backapp_mvn_buildNumber} --fail=false

  #     - name: promoting_docker_build_info_backapp
  #       type: PromoteBuild
  #       configuration:
  #         affinityGroup: swampup
  #         targetRepository: app-docker-rc-local
  #         includeDependencies: false
  #         status: "DOCKER_SCAN_OK"
  #         comment: "Xray scan passed succesfully"
  #         copy: false
  #         integrations:
  #           - name: artifactory_eu
  #         inputResources:
  #           - name: build_info_docker_backapp
  #             trigger: true
  #         inputSteps:
  #           - name: xray_scan_docker_build_info_backapp
  #         outputResources:
  #           - name: build_info_docker_backapp_promoted_staging
  #       execution:
  #         onStart:
  #           - 'export ArtIP=$(echo ${int_artifactory_url}|awk -F ''/'' ''{print $3}'')'
  #           - echo ${res_build_info_docker_backapp_buildName}
  #           - echo ${res_build_info_docker_backapp_buildNumber}
  #           - jfrog rt cp --build=${res_build_info_docker_backapp_buildName}/${res_build_info_docker_backapp_buildNumber} app-docker-dev-local/ app-docker-rc-local/
  #         onSuccess:
  #           - jfrog rt sp --build=${res_build_info_docker_backapp_buildName}/${res_build_info_docker_backapp_buildNumber} app-docker-rc-local/**/manifest.json "docker.tag=${myDockerTag}"
  #           - write_output build_info_docker_backapp_promoted_staging "backregistry=\"${ArtIP}/app-docker-virtual\""
  #           - write_output build_info_docker_backapp_promoted_staging "backimage=\"backapp\""
  #           - write_output build_info_docker_backapp_promoted_staging "backtag=${myDockerTag}"
