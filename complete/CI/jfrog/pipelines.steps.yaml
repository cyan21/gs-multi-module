pipelines:
  - name: backapp_mvn
    steps:
      - name: build_backapp_mvn
        type: MvnBuild
        configuration: 
          # runtime:
          #   type: image
          #   image:
          #     custom:
          #       name: drydock/u18java
          #       tag: master
          mvnCommand:  clean package
          sourceLocation:       complete/  #required
          configFileLocation:   CI  #required
          configFileName:       mvn-art-config  #required
          forceXrayScan:        false #optional
          autoPublishBuildInfo: false #optional
          inputResources:
            - name: src_code_backapp_mvn
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - echo $res_pb_backapp_mvn_myversion
          onSuccess:
#            - appVersion=`if [[ ${res_src_code_backapp_mvn_isGitTag} == "True" ]]; then echo ${res_src_code_backapp_mvn_gitTagName}; else echo ${res_pb_backapp_myversion}; fi` 
            - add_run_variables appVersion=`if [[ ${res_src_code_backapp_mvn_isGitTag} == "True" ]]; then echo ${res_src_code_backapp_mvn_gitTagName}; else echo ${res_pb_backapp_myversion}; fi` 
            - add_run_variables dockerTag="${appVersion}-${res_src_code_backapp_mvn_commitSha}"
            - echo $appVersion

      - name: publish_bi_backapp_mvn
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: build_backapp_mvn
          outputResources:
            - name: bi_backapp_mvn
        execution:
          onStart:
            - echo "Preparing for Xray scan..."
          onSuccess:
            - echo build name / build number ${res_bi_backapp_mvn_buildName} ${res_bi_backapp_mvn_buildNumber}
      
      - name: scan_backapp_mvn
        type: Bash
        configuration:
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: bi_backapp_mvn
        execution:
          onStart:
            - echo ${res_bi_backapp_mvn_buildName}
            - echo ${res_bi_backapp_mvn_buildNumber}
            - jfrog rt bs ${res_bi_backapp_mvn_buildName} ${res_bi_backapp_mvn_buildNumber} --fail=false

      - name: promote_bi_backapp_mvn
        type: PromoteBuild
        configuration:
          targetRepository: app-mvn-rc-local
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: false
          inputResources:
            - name: bi_backapp_mvn
              trigger: true
          inputSteps:
            - name: scan_backapp_mvn
          outputResources:
            - name: pb_backapp_mvn            
            - name: bi_backapp_mvn_promoted_staging
        execution:  
          onStart:
            - echo ${res_bi_backapp_mvn_buildName} 
            - echo ${res_bi_backapp_mvn_buildNumber} 
            - echo $dockerTag
          onSuccess:
            - jfrog rt sp --build=${res_bi_backapp_mvn_buildName}/${res_bi_backapp_mvn_buildNumber} app-mvn-rc-local/ "app.version=${appVersion}"
            - write_output pb_backapp_mvn dockerAppTag=${dockerTag}
            
  - name: backapp_mvn_docker
    steps:
      - name: build_backapp_mvn_docker
        type: DockerBuild
        configuration:
          affinityGroup: swampup
          dockerFileName: Dockerfile
          dockerFileLocation: complete/CI/Docker/
#          dockerImageName: '${ArtIP}/app-docker/backapp-mvn'
#          dockerImageTag: '${res_back_appBuildInfo_scanned_mvn_myversion}-${res_src_dockerfile_back_app_commitSha}'
          dockerImageName: 'yannaws-app-docker.jfrog.io/backapp-mvn'
          dockerImageTag: '${res_pb_backapp_mvn_dockerAppTag}'
          inputResources:
            - name: src_dockerfile_backapp_mvn
            - name: pb_backapp_mvn
            - name: fs_backapp_mvn
          integrations:
            - name: artifactory_eu
            # - name: docker_registry
  #      execution:
  #        onStart:
  #          - 'export ArtIP=$(echo ${int_artifactory_eu_url}|awk -F ''/'' ''{print $3}'')'
  #          - echo ${res_back_appBuildInfo_scanned_mvn_myversion}
  #           - add_pipeline_variables appVersion="${res_back_appBuildInfo_scanned_mvn_myversion}"
  #           - add_pipeline_variables triggerBuildInfoName="${res_bi_backapp_mvn_promoted_staging_buildName}"
  #           - add_pipeline_variables triggerBuildInfoNumber="${res_bi_backapp_mvn_promoted_staging_buildNumber}"
  #           - echo $triggerBuildInfoName
  #           - echo $triggerBuildInfoNumber
  #           - echo ${appVersion}Ã’
  #           #####################################
  #           - echo ${res_back_app_mvn_resourcePath}
  #           - echo "Gradle App Build number :" 
  #           - echo ${triggerBuildInfoNumber}
  #           - echo "Webservice App version :" 
  #           - echo ${appVersion} 
  #           - echo "Git repo hash :" 
  #           - echo ${res_src_dockerfile_backapp_mvn_commitSha}
  #           - echo "Copying exec binary to specific location..." && ls -l
  #           - echo "Filespec location :" && echo ${res_backapp_mvn_resourcePath} && ls -l ${res_backapp_mvn_resourcePath}
  #           - echo $appVersion
  #           - sed -i "s/registry/${ArtIP}/g" ${res_src_dockerfile_back_app_mvn_resourcePath}/complete/CI/Docker/Dockerfile
  #           - add_pipeline_variables myDockerTag="${appVersion}-${res_src_dockerfile_back_app_mvn_commitSha}"
  #         onSuccess:
  #           - echo "Job well done!"

      - name: publish_backapp_mvn_docker
        type: DockerPush
        configuration:
          affinityGroup: swampup
          targetRepository: app-docker
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_backapp_mvn_docker
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_backapp_mvn_docker
  #       execution:
  #         onSuccess:
  #           - echo "Job well done!"
  #           - echo $appVersion

      - name: scan_bi_backapp_mvn_docker
        type: Bash
        configuration:
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: bi_backapp_mvn_docker
        execution:
          onStart:
            - echo ${res_bi_backapp_mvn_docker_buildName}
            - echo ${res_bi_backapp_mvn_docker_buildNumber}
            - jfrog rt bs ${res_bi_backapp_mvn_docker_buildName} ${res_bi_backapp_mvn_docker_buildNumber} --fail=false

      - name: promote_bi_backapp_mvn_docker
        type: PromoteBuild
        configuration:
          targetRepository: app-docker-rc-local
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: bi_backapp_mvn_docker
              trigger: true
          inputSteps:
            - name: scan_bi_backapp_mvn_docker
          outputResources:
            - name: bi_backapp_mvn_docker_promoted_staging
  #       execution:
  #         onStart:
  #           - 'export ArtIP=$(echo ${int_artifactory_url}|awk -F ''/'' ''{print $3}'')'
  #           - echo ${res_bi_backapp_mvn_docker_buildName}
  #           - echo ${res_bi_backapp_mvn_docker_buildNumber}
  #           - jfrog rt cp --build=${res_bi_backapp_mvn_docker_buildName}/${res_bi_backapp_mvn_docker_buildNumber} app-docker-dev-local/ app-docker-rc-local/
  #         onSuccess:
  #           - jfrog rt sp --build=${res_build_info_docker_backapp_buildName}/${res_build_info_docker_backapp_buildNumber} app-docker-rc-local/**/manifest.json "docker.tag=${myDockerTag}"
  #           - write_output build_info_docker_backapp_promoted_staging "backregistry=\"${ArtIP}/app-docker-virtual\""
  #           - write_output build_info_docker_backapp_promoted_staging "backimage=\"backapp\""
  #           - write_output build_info_docker_backapp_promoted_staging "backtag=${myDockerTag}"
